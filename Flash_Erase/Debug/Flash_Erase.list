
Flash_Erase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fcc  08002fcc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fd4  08002fd4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000002c  08003008  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003008  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b280  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000202c  00000000  00000000  0002b31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d9  00000000  00000000  0002dda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190b5  00000000  00000000  0002e581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cea8  00000000  00000000  00047636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be51  00000000  00000000  000544de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000284c  00000000  00000000  000f0330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000f2b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f6c 	.word	0x08002f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000030 	.word	0x20000030
 80001cc:	08002f6c 	.word	0x08002f6c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <MX_GPIO_Init+0x8c>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <MX_GPIO_Init+0x8c>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_GPIO_Init+0x8c>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_GPIO_Init+0x8c>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a16      	ldr	r2, [pc, #88]	; (8000558 <MX_GPIO_Init+0x8c>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_GPIO_Init+0x8c>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_GPIO_Init+0x8c>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a10      	ldr	r2, [pc, #64]	; (8000558 <MX_GPIO_Init+0x8c>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_GPIO_Init+0x8c>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2108      	movs	r1, #8
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <MX_GPIO_Init+0x90>)
 8000530:	f000 ff8a 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000534:	2308      	movs	r3, #8
 8000536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	4619      	mov	r1, r3
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <MX_GPIO_Init+0x90>)
 800054c:	f000 fe0a 	bl	8001164 <HAL_GPIO_Init>

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000
 800055c:	48000400 	.word	0x48000400

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fa2d 	bl	80009c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f862 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f7ff ffae 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f964 	bl	800083c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // 플래시 메모리 Unlock
  HAL_FLASH_Unlock();
 8000574:	f000 fbec 	bl	8000d50 <HAL_FLASH_Unlock>

  /* Get the 1st page to erase */
  FirstPage = GetPage(FLASH_USER_START_ADDR);
 8000578:	4825      	ldr	r0, [pc, #148]	; (8000610 <main+0xb0>)
 800057a:	f000 f8af 	bl	80006dc <GetPage>
 800057e:	4603      	mov	r3, r0
 8000580:	4a24      	ldr	r2, [pc, #144]	; (8000614 <main+0xb4>)
 8000582:	6013      	str	r3, [r2, #0]

  /* Get the number of pages to erase from 1st page */
  NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8000584:	4824      	ldr	r0, [pc, #144]	; (8000618 <main+0xb8>)
 8000586:	f000 f8a9 	bl	80006dc <GetPage>
 800058a:	4602      	mov	r2, r0
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <main+0xb4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	3301      	adds	r3, #1
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <main+0xbc>)
 8000596:	6013      	str	r3, [r2, #0]

  /* Get the bank */
  BankNumber = GetBank(FLASH_USER_START_ADDR);
 8000598:	481d      	ldr	r0, [pc, #116]	; (8000610 <main+0xb0>)
 800059a:	f000 f8df 	bl	800075c <GetBank>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <main+0xc0>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <main+0xc4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
  EraseInitStruct.Banks       = BankNumber;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <main+0xc0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a1d      	ldr	r2, [pc, #116]	; (8000624 <main+0xc4>)
 80005b0:	6053      	str	r3, [r2, #4]
  EraseInitStruct.Page        = FirstPage;
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <main+0xb4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <main+0xc4>)
 80005b8:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbPages     = NbOfPages;
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <main+0xbc>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a19      	ldr	r2, [pc, #100]	; (8000624 <main+0xc4>)
 80005c0:	60d3      	str	r3, [r2, #12]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80005c2:	4919      	ldr	r1, [pc, #100]	; (8000628 <main+0xc8>)
 80005c4:	4817      	ldr	r0, [pc, #92]	; (8000624 <main+0xc4>)
 80005c6:	f000 fca9 	bl	8000f1c <HAL_FLASHEx_Erase>


  }

  // 다시 Address를 시작주소로 보낸다
    Address = FLASH_USER_START_ADDR;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <main+0xcc>)
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <main+0xb0>)
 80005ce:	601a      	str	r2, [r3, #0]


    while (Address < FLASH_USER_END_ADDR)
 80005d0:	e00f      	b.n	80005f2 <main+0x92>
     {
       if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_64) == HAL_OK)
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0xcc>)
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	a30c      	add	r3, pc, #48	; (adr r3, 8000608 <main+0xa8>)
 80005d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fb4b 	bl	8000c78 <HAL_FLASH_Program>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d104      	bne.n	80005f2 <main+0x92>
       {
         Address = Address + 8;
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <main+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3308      	adds	r3, #8
 80005ee:	4a0f      	ldr	r2, [pc, #60]	; (800062c <main+0xcc>)
 80005f0:	6013      	str	r3, [r2, #0]
    while (Address < FLASH_USER_END_ADDR)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <main+0xcc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <main+0xb8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d3ea      	bcc.n	80005d2 <main+0x72>
     }


    /* Lock the Flash to disable the flash control register access (recommended
       to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 80005fc:	f000 fbca 	bl	8000d94 <HAL_FLASH_Lock>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0xa0>
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	12345678 	.word	0x12345678
 800060c:	12345678 	.word	0x12345678
 8000610:	08008000 	.word	0x08008000
 8000614:	20000058 	.word	0x20000058
 8000618:	08008800 	.word	0x08008800
 800061c:	2000005c 	.word	0x2000005c
 8000620:	20000060 	.word	0x20000060
 8000624:	20000048 	.word	0x20000048
 8000628:	20000068 	.word	0x20000068
 800062c:	20000064 	.word	0x20000064

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2244      	movs	r2, #68	; 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fc67 	bl	8002f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000652:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000656:	f000 ff2d 	bl	80014b4 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000660:	f000 f887 	bl	8000772 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000664:	f000 ff08 	bl	8001478 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemClock_Config+0xa8>)
 800066a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <SystemClock_Config+0xa8>)
 8000670:	f023 0318 	bic.w	r3, r3, #24
 8000674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000678:	2314      	movs	r3, #20
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ff63 	bl	8001560 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006a0:	f000 f867 	bl	8000772 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	2101      	movs	r1, #1
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fbb1 	bl	8001e24 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c8:	f000 f853 	bl	8000772 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006cc:	f001 ff54 	bl	8002578 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006d0:	bf00      	nop
 80006d2:	3758      	adds	r7, #88	; 0x58
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <GetPage>:

/* USER CODE BEGIN 4 */
static uint32_t GetPage(uint32_t Addr)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <GetPage+0x74>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d007      	beq.n	8000706 <GetPage+0x2a>
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <GetPage+0x74>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	029a      	lsls	r2, r3, #10
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <GetPage+0x78>)
 80006fe:	4013      	ands	r3, r2
 8000700:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000704:	e000      	b.n	8000708 <GetPage+0x2c>
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <GetPage+0x7c>)
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	4293      	cmp	r3, r2
 800070c:	d905      	bls.n	800071a <GetPage+0x3e>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000714:	0adb      	lsrs	r3, r3, #11
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e013      	b.n	8000742 <GetPage+0x66>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <GetPage+0x74>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	b29b      	uxth	r3, r3
 8000720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000724:	4293      	cmp	r3, r2
 8000726:	d007      	beq.n	8000738 <GetPage+0x5c>
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <GetPage+0x74>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	029a      	lsls	r2, r3, #10
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <GetPage+0x78>)
 8000730:	4013      	ands	r3, r2
 8000732:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000736:	e000      	b.n	800073a <GetPage+0x5e>
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <GetPage+0x7c>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	0adb      	lsrs	r3, r3, #11
 8000740:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	1fff75e0 	.word	0x1fff75e0
 8000754:	03fffc00 	.word	0x03fffc00
 8000758:	08020000 	.word	0x08020000

0800075c <GetBank>:
  * @brief  Gets the bank of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The bank of a given address
  */
static uint32_t GetBank(uint32_t Addr)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  return FLASH_BANK_1;
 8000764:	2301      	movs	r3, #1
}
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000776:	b672      	cpsid	i
}
 8000778:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077a:	e7fe      	b.n	800077a <Error_Handler+0x8>

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6613      	str	r3, [r2, #96]	; 0x60
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f92c 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000842:	4a15      	ldr	r2, [pc, #84]	; (8000898 <MX_USART2_UART_Init+0x5c>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART2_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000880:	f001 fe8a 	bl	8002598 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800088a:	f7ff ff72 	bl	8000772 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000006c 	.word	0x2000006c
 8000898:	40004400 	.word	0x40004400

0800089c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b096      	sub	sp, #88	; 0x58
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2234      	movs	r2, #52	; 0x34
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fb28 	bl	8002f12 <memset>
  if(uartHandle->Instance==USART2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <HAL_UART_MspInit+0xcc>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d148      	bne.n	800095e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fcc7 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e4:	f7ff ff45 	bl	8000772 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <HAL_UART_MspInit+0xd0>)
 80008ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ec:	4a1f      	ldr	r2, [pc, #124]	; (800096c <HAL_UART_MspInit+0xd0>)
 80008ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f2:	6593      	str	r3, [r2, #88]	; 0x58
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_UART_MspInit+0xd0>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_UART_MspInit+0xd0>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0xd0>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_UART_MspInit+0xd0>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000918:	2304      	movs	r3, #4
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000928:	2307      	movs	r3, #7
 800092a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 fc15 	bl	8001164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800093a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800094c:	2303      	movs	r3, #3
 800094e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f000 fc03 	bl	8001164 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800095e:	bf00      	nop
 8000960:	3758      	adds	r7, #88	; 0x58
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	40021000 	.word	0x40021000

08000970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000974:	f7ff ff50 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	; (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f002 fac1 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a2:	f7ff fddd 	bl	8000560 <main>

080009a6 <LoopForever>:

LoopForever:
    b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80009b4:	08002fdc 	.word	0x08002fdc
  ldr r2, =_sbss
 80009b8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80009bc:	200000f8 	.word	0x200000f8

080009c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>

080009c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f91f 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f80e 	bl	80009f4 <HAL_InitTick>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	e001      	b.n	80009e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e4:	f7ff feca 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_InitTick+0x6c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d023      	beq.n	8000a50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_InitTick+0x70>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_InitTick+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f91d 	bl	8000c5e <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10f      	bne.n	8000a4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d809      	bhi.n	8000a44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f8f5 	bl	8000c26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_InitTick+0x74>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e007      	b.n	8000a54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e004      	b.n	8000a54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
 8000a4e:	e001      	b.n	8000a54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	200000f4 	.word	0x200000f4

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000f4 	.word	0x200000f4

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff47 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff5c 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffb0 	bl	8000bcc <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <HAL_FLASH_Program+0xd0>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d101      	bne.n	8000c96 <HAL_FLASH_Program+0x1e>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e053      	b.n	8000d3e <HAL_FLASH_Program+0xc6>
 8000c96:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <HAL_FLASH_Program+0xd0>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ca0:	f000 f888 	bl	8000db4 <FLASH_WaitForLastOperation>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d143      	bne.n	8000d36 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <HAL_FLASH_Program+0xd0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <HAL_FLASH_Program+0xd4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d009      	beq.n	8000cd4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <HAL_FLASH_Program+0xd4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_FLASH_Program+0xd4>)
 8000cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <HAL_FLASH_Program+0xd0>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	771a      	strb	r2, [r3, #28]
 8000cd2:	e002      	b.n	8000cda <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_FLASH_Program+0xd0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d107      	bne.n	8000cf0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ce4:	68b8      	ldr	r0, [r7, #8]
 8000ce6:	f000 f8bd 	bl	8000e64 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000cea:	2301      	movs	r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e010      	b.n	8000d12 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d002      	beq.n	8000cfc <HAL_FLASH_Program+0x84>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d10a      	bne.n	8000d12 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68b8      	ldr	r0, [r7, #8]
 8000d02:	f000 f8d5 	bl	8000eb0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d102      	bne.n	8000d12 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000d0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d10:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d16:	f000 f84d 	bl	8000db4 <FLASH_WaitForLastOperation>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_FLASH_Program+0xd4>)
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <HAL_FLASH_Program+0xd4>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000d32:	f000 f9cd 	bl	80010d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_FLASH_Program+0xd0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

  return status;
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000000c 	.word	0x2000000c
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_FLASH_Unlock+0x38>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	da0b      	bge.n	8000d7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_FLASH_Unlock+0x38>)
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <HAL_FLASH_Unlock+0x3c>)
 8000d66:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_FLASH_Unlock+0x38>)
 8000d6a:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <HAL_FLASH_Unlock+0x40>)
 8000d6c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_FLASH_Unlock+0x38>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da01      	bge.n	8000d7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40022000 	.word	0x40022000
 8000d8c:	45670123 	.word	0x45670123
 8000d90:	cdef89ab 	.word	0xcdef89ab

08000d94 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_FLASH_Lock+0x1c>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_FLASH_Lock+0x1c>)
 8000d9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000da2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40022000 	.word	0x40022000

08000db4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff fe6a 	bl	8000a94 <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000dc2:	e00d      	b.n	8000de0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dca:	d009      	beq.n	8000de0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8000dcc:	f7ff fe62 	bl	8000a94 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d801      	bhi.n	8000de0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e036      	b.n	8000e4e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <FLASH_WaitForLastOperation+0xa4>)
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1eb      	bne.n	8000dc4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <FLASH_WaitForLastOperation+0xa4>)
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <FLASH_WaitForLastOperation+0xa8>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d01e      	beq.n	8000e3a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <FLASH_WaitForLastOperation+0xac>)
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <FLASH_WaitForLastOperation+0xac>)
 8000e06:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <FLASH_WaitForLastOperation+0x6e>
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <FLASH_WaitForLastOperation+0xa4>)
 8000e14:	699a      	ldr	r2, [r3, #24]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e1c:	490e      	ldr	r1, [pc, #56]	; (8000e58 <FLASH_WaitForLastOperation+0xa4>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	618b      	str	r3, [r1, #24]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <FLASH_WaitForLastOperation+0x82>
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <FLASH_WaitForLastOperation+0xa4>)
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e34:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e009      	b.n	8000e4e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <FLASH_WaitForLastOperation+0xa4>)
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <FLASH_WaitForLastOperation+0xa4>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40022000 	.word	0x40022000
 8000e5c:	0002c3fa 	.word	0x0002c3fa
 8000e60:	2000000c 	.word	0x2000000c

08000e64 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <FLASH_Program_DoubleWord+0x48>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <FLASH_Program_DoubleWord+0x48>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000e82:	f3bf 8f6f 	isb	sy
}
 8000e86:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	000a      	movs	r2, r1
 8000e96:	2300      	movs	r3, #0
 8000e98:	68f9      	ldr	r1, [r7, #12]
 8000e9a:	3104      	adds	r1, #4
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40022000 	.word	0x40022000

08000eb0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000eba:	2340      	movs	r3, #64	; 0x40
 8000ebc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <FLASH_Program_Fast+0x68>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <FLASH_Program_Fast+0x68>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8000ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ed8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	3304      	adds	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
    row_index--;
 8000ef4:	7ffb      	ldrb	r3, [r7, #31]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8000efa:	7ffb      	ldrb	r3, [r7, #31]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ef      	bne.n	8000ee0 <FLASH_Program_Fast+0x30>
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f383 8810 	msr	PRIMASK, r3
}
 8000f0a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8000f0c:	bf00      	nop
 8000f0e:	3724      	adds	r7, #36	; 0x24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f26:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_FLASHEx_Erase+0x128>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_FLASHEx_Erase+0x16>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e083      	b.n	800103a <HAL_FLASHEx_Erase+0x11e>
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <HAL_FLASHEx_Erase+0x128>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f3c:	f7ff ff3a 	bl	8000db4 <FLASH_WaitForLastOperation>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d173      	bne.n	8001032 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <HAL_FLASHEx_Erase+0x128>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d009      	beq.n	8000f7c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a36      	ldr	r2, [pc, #216]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f72:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <HAL_FLASHEx_Erase+0x128>)
 8000f76:	2203      	movs	r2, #3
 8000f78:	771a      	strb	r2, [r3, #28]
 8000f7a:	e016      	b.n	8000faa <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8000f7c:	4b31      	ldr	r3, [pc, #196]	; (8001044 <HAL_FLASHEx_Erase+0x128>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	771a      	strb	r2, [r3, #28]
 8000f82:	e012      	b.n	8000faa <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <HAL_FLASHEx_Erase+0x128>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	771a      	strb	r2, [r3, #28]
 8000fa2:	e002      	b.n	8000faa <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_FLASHEx_Erase+0x128>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d111      	bne.n	8000fd6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f848 	bl	800104c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fc0:	f7ff fef8 	bl	8000db4 <FLASH_WaitForLastOperation>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8000fce:	f023 0304 	bic.w	r3, r3, #4
 8000fd2:	6153      	str	r3, [r2, #20]
 8000fd4:	e02b      	b.n	800102e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	e01b      	b.n	800101e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4619      	mov	r1, r3
 8000fec:	68b8      	ldr	r0, [r7, #8]
 8000fee:	f000 f84b 	bl	8001088 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ff2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ff6:	f7ff fedd 	bl	8000db4 <FLASH_WaitForLastOperation>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_FLASHEx_Erase+0x12c>)
 8001004:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8001008:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	601a      	str	r2, [r3, #0]
          break;
 8001016:	e00a      	b.n	800102e <HAL_FLASHEx_Erase+0x112>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	3301      	adds	r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	4413      	add	r3, r2
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	429a      	cmp	r2, r3
 800102c:	d3db      	bcc.n	8000fe6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800102e:	f000 f84f 	bl	80010d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <HAL_FLASHEx_Erase+0x128>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]

  return status;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000000c 	.word	0x2000000c
 8001048:	40022000 	.word	0x40022000

0800104c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <FLASH_MassErase+0x38>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <FLASH_MassErase+0x38>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <FLASH_MassErase+0x38>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <FLASH_MassErase+0x38>)
 8001070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001074:	6153      	str	r3, [r2, #20]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40022000 	.word	0x40022000

08001088 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <FLASH_PageErase+0x44>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80010a2:	490a      	ldr	r1, [pc, #40]	; (80010cc <FLASH_PageErase+0x44>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <FLASH_PageErase+0x44>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <FLASH_PageErase+0x44>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <FLASH_PageErase+0x44>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <FLASH_PageErase+0x44>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010be:	6153      	str	r3, [r2, #20]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40022000 	.word	0x40022000

080010d0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <FLASH_FlushCaches+0x8c>)
 80010d8:	7f1b      	ldrb	r3, [r3, #28]
 80010da:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d002      	beq.n	80010e8 <FLASH_FlushCaches+0x18>
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d117      	bne.n	8001118 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <FLASH_FlushCaches+0x90>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <FLASH_FlushCaches+0x90>)
 80010ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <FLASH_FlushCaches+0x90>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a19      	ldr	r2, [pc, #100]	; (8001160 <FLASH_FlushCaches+0x90>)
 80010fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <FLASH_FlushCaches+0x90>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <FLASH_FlushCaches+0x90>)
 8001106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800110a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <FLASH_FlushCaches+0x90>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a13      	ldr	r2, [pc, #76]	; (8001160 <FLASH_FlushCaches+0x90>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001116:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d002      	beq.n	8001124 <FLASH_FlushCaches+0x54>
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d111      	bne.n	8001148 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <FLASH_FlushCaches+0x90>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <FLASH_FlushCaches+0x90>)
 800112a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <FLASH_FlushCaches+0x90>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <FLASH_FlushCaches+0x90>)
 8001136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800113a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <FLASH_FlushCaches+0x90>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <FLASH_FlushCaches+0x90>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <FLASH_FlushCaches+0x8c>)
 800114a:	2200      	movs	r2, #0
 800114c:	771a      	strb	r2, [r3, #28]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000000c 	.word	0x2000000c
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e14e      	b.n	8001412 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8140 	beq.w	800140c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 809a 	beq.w	800140c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012dc:	4a54      	ldr	r2, [pc, #336]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	; 0x60
 80012e4:	4b52      	ldr	r3, [pc, #328]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131a:	d013      	beq.n	8001344 <HAL_GPIO_Init+0x1e0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a46      	ldr	r2, [pc, #280]	; (8001438 <HAL_GPIO_Init+0x2d4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d00d      	beq.n	8001340 <HAL_GPIO_Init+0x1dc>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a45      	ldr	r2, [pc, #276]	; (800143c <HAL_GPIO_Init+0x2d8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x1d8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a44      	ldr	r2, [pc, #272]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x1d4>
 8001334:	2303      	movs	r3, #3
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001338:	2307      	movs	r3, #7
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001344:	2300      	movs	r3, #0
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001356:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001364:	4b37      	ldr	r3, [pc, #220]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001388:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	f47f aea9 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	40010400 	.word	0x40010400

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001464:	e002      	b.n	800146c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40007000 	.word	0x40007000

08001498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c2:	d130      	bne.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d0:	d038      	beq.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2232      	movs	r2, #50	; 0x32
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	4a1b      	ldr	r2, [pc, #108]	; (800155c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f8:	e002      	b.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150c:	d102      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x60>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f2      	bne.n	80014fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001520:	d110      	bne.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e00f      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800152e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001532:	d007      	beq.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40007000 	.word	0x40007000
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83

08001560 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	f000 bc4f 	b.w	8001e12 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001574:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157e:	4b95      	ldr	r3, [pc, #596]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80e6 	beq.w	8001762 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d007      	beq.n	80015ac <HAL_RCC_OscConfig+0x4c>
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	f040 808d 	bne.w	80016be <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	f040 8089 	bne.w	80016be <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ac:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_RCC_OscConfig+0x66>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f000 bc26 	b.w	8001e12 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ca:	4b82      	ldr	r3, [pc, #520]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <HAL_RCC_OscConfig+0x80>
 80015d6:	4b7f      	ldr	r3, [pc, #508]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015de:	e005      	b.n	80015ec <HAL_RCC_OscConfig+0x8c>
 80015e0:	4b7c      	ldr	r3, [pc, #496]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d224      	bcs.n	800163a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fdd9 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	f000 bc06 	b.w	8001e12 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	496d      	ldr	r1, [pc, #436]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001624:	4b6b      	ldr	r3, [pc, #428]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	4968      	ldr	r1, [pc, #416]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e025      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163a:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a65      	ldr	r2, [pc, #404]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	4960      	ldr	r1, [pc, #384]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001658:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	495b      	ldr	r1, [pc, #364]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fd98 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e3c5      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001686:	f000 fccd 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 800168a:	4602      	mov	r2, r0
 800168c:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	4950      	ldr	r1, [pc, #320]	; (80017d8 <HAL_RCC_OscConfig+0x278>)
 8001698:	5ccb      	ldrb	r3, [r1, r3]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	4a4e      	ldr	r2, [pc, #312]	; (80017dc <HAL_RCC_OscConfig+0x27c>)
 80016a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016a6:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f9a2 	bl	80009f4 <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d052      	beq.n	8001760 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	e3a9      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d032      	beq.n	800172c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a42      	ldr	r2, [pc, #264]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d2:	f7ff f9df 	bl	8000a94 <HAL_GetTick>
 80016d6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016da:	f7ff f9db 	bl	8000a94 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e392      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a35      	ldr	r2, [pc, #212]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	4930      	ldr	r1, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	492b      	ldr	r1, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
 800172a:	e01a      	b.n	8001762 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a28      	ldr	r2, [pc, #160]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001738:	f7ff f9ac 	bl	8000a94 <HAL_GetTick>
 800173c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001740:	f7ff f9a8 	bl	8000a94 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e35f      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x1e0>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d073      	beq.n	8001856 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d005      	beq.n	8001780 <HAL_RCC_OscConfig+0x220>
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d10e      	bne.n	8001798 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d10b      	bne.n	8001798 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d063      	beq.n	8001854 <HAL_RCC_OscConfig+0x2f4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d15f      	bne.n	8001854 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e33c      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a0:	d106      	bne.n	80017b0 <HAL_RCC_OscConfig+0x250>
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e025      	b.n	80017fc <HAL_RCC_OscConfig+0x29c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b8:	d114      	bne.n	80017e4 <HAL_RCC_OscConfig+0x284>
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a02      	ldr	r2, [pc, #8]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e013      	b.n	80017fc <HAL_RCC_OscConfig+0x29c>
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08002f84 	.word	0x08002f84
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004
 80017e4:	4b8f      	ldr	r3, [pc, #572]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a8e      	ldr	r2, [pc, #568]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b8c      	ldr	r3, [pc, #560]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a8b      	ldr	r2, [pc, #556]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff f946 	bl	8000a94 <HAL_GetTick>
 8001808:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff f942 	bl	8000a94 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e2f9      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181e:	4b81      	ldr	r3, [pc, #516]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x2ac>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff f932 	bl	8000a94 <HAL_GetTick>
 8001830:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff f92e 	bl	8000a94 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e2e5      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001846:	4b77      	ldr	r3, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x2d4>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d060      	beq.n	8001924 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	2b04      	cmp	r3, #4
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x314>
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d119      	bne.n	80018a2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d116      	bne.n	80018a2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x32c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e2c2      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	4962      	ldr	r1, [pc, #392]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a0:	e040      	b.n	8001924 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d023      	beq.n	80018f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018aa:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff f8ed 	bl	8000a94 <HAL_GetTick>
 80018ba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff f8e9 	bl	8000a94 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e2a0      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d0:	4b54      	ldr	r3, [pc, #336]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b51      	ldr	r3, [pc, #324]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	494e      	ldr	r1, [pc, #312]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
 80018f0:	e018      	b.n	8001924 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a4b      	ldr	r2, [pc, #300]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff f8c9 	bl	8000a94 <HAL_GetTick>
 8001902:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff f8c5 	bl	8000a94 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e27c      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8082 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d05f      	beq.n	80019fa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001940:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	429a      	cmp	r2, r3
 800194e:	d037      	beq.n	80019c0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e254      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01b      	beq.n	80019aa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001978:	4a2a      	ldr	r2, [pc, #168]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001982:	f7ff f887 	bl	8000a94 <HAL_GetTick>
 8001986:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198a:	f7ff f883 	bl	8000a94 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b11      	cmp	r3, #17
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e23a      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ef      	bne.n	800198a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b0:	f023 0210 	bic.w	r2, r3, #16
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	491a      	ldr	r1, [pc, #104]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f860 	bl	8000a94 <HAL_GetTick>
 80019d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff f85c 	bl	8000a94 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b11      	cmp	r3, #17
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e213      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x478>
 80019f8:	e01d      	b.n	8001a36 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f843 	bl	8000a94 <HAL_GetTick>
 8001a0e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff f83f 	bl	8000a94 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d903      	bls.n	8001a28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1f6      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
 8001a24:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a28:	4ba9      	ldr	r3, [pc, #676]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ed      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80bd 	beq.w	8001bbe <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a4a:	4ba1      	ldr	r3, [pc, #644]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b9e      	ldr	r3, [pc, #632]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	4a9d      	ldr	r2, [pc, #628]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6593      	str	r3, [r2, #88]	; 0x58
 8001a62:	4b9b      	ldr	r3, [pc, #620]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a74:	4b97      	ldr	r3, [pc, #604]	; (8001cd4 <HAL_RCC_OscConfig+0x774>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d118      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a80:	4b94      	ldr	r3, [pc, #592]	; (8001cd4 <HAL_RCC_OscConfig+0x774>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a93      	ldr	r2, [pc, #588]	; (8001cd4 <HAL_RCC_OscConfig+0x774>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f802 	bl	8000a94 <HAL_GetTick>
 8001a90:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a94:	f7fe fffe 	bl	8000a94 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1b5      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x774>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d02c      	beq.n	8001b18 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001abe:	4b84      	ldr	r3, [pc, #528]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad0:	497f      	ldr	r1, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ae4:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aea:	4a79      	ldr	r2, [pc, #484]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001af4:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b04:	e018      	b.n	8001b38 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	4a70      	ldr	r2, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b16:	e00f      	b.n	8001b38 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b28:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	4a68      	ldr	r2, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d016      	beq.n	8001b6e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7fe ffa8 	bl	8000a94 <HAL_GetTick>
 8001b44:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7fe ffa4 	bl	8000a94 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e159      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ed      	beq.n	8001b48 <HAL_RCC_OscConfig+0x5e8>
 8001b6c:	e01d      	b.n	8001baa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7fe ff91 	bl	8000a94 <HAL_GetTick>
 8001b72:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7fe ff8d 	bl	8000a94 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e142      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ed      	bne.n	8001b76 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a46      	ldr	r2, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd8:	4a3d      	ldr	r2, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7fe ff57 	bl	8000a94 <HAL_GetTick>
 8001be6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bea:	f7fe ff53 	bl	8000a94 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e10a      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ef      	beq.n	8001bea <HAL_RCC_OscConfig+0x68a>
 8001c0a:	e01b      	b.n	8001c44 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c0c:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c12:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7fe ff3a 	bl	8000a94 <HAL_GetTick>
 8001c20:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c24:	f7fe ff36 	bl	8000a94 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0ed      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ef      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80e1 	beq.w	8001e10 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	f040 80b5 	bne.w	8001dc2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d124      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	3b01      	subs	r3, #1
 8001c78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d11b      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d113      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d05f      	beq.n	8001d76 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	d05a      	beq.n	8001d72 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <HAL_RCC_OscConfig+0x770>)
 8001cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc8:	f7fe fee4 	bl	8000a94 <HAL_GetTick>
 8001ccc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cce:	e00c      	b.n	8001cea <HAL_RCC_OscConfig+0x78a>
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe fedc 	bl	8000a94 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e093      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cea:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf6:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x8c0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d06:	3a01      	subs	r2, #1
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d10:	0212      	lsls	r2, r2, #8
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d18:	0852      	lsrs	r2, r2, #1
 8001d1a:	3a01      	subs	r2, #1
 8001d1c:	0552      	lsls	r2, r2, #21
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d24:	0852      	lsrs	r2, r2, #1
 8001d26:	3a01      	subs	r2, #1
 8001d28:	0652      	lsls	r2, r2, #25
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	493b      	ldr	r1, [pc, #236]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d32:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4a36      	ldr	r2, [pc, #216]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d48:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d4a:	f7fe fea3 	bl	8000a94 <HAL_GetTick>
 8001d4e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d52:	f7fe fe9f 	bl	8000a94 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e056      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d70:	e04e      	b.n	8001e10 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e04d      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d146      	bne.n	8001e10 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d98:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d9a:	f7fe fe7b 	bl	8000a94 <HAL_GetTick>
 8001d9e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7fe fe77 	bl	8000a94 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e02e      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x842>
 8001dc0:	e026      	b.n	8001e10 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d021      	beq.n	8001e0c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fe5e 	bl	8000a94 <HAL_GetTick>
 8001dd8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe fe5a 	bl	8000a94 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e011      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_RCC_OscConfig+0x8bc>)
 8001e00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e04:	f023 0303 	bic.w	r3, r3, #3
 8001e08:	60d3      	str	r3, [r2, #12]
 8001e0a:	e001      	b.n	8001e10 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	f99f808c 	.word	0xf99f808c

08001e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0e7      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e38:	4b75      	ldr	r3, [pc, #468]	; (8002010 <HAL_RCC_ClockConfig+0x1ec>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d910      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b72      	ldr	r3, [pc, #456]	; (8002010 <HAL_RCC_ClockConfig+0x1ec>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 0207 	bic.w	r2, r3, #7
 8001e4e:	4970      	ldr	r1, [pc, #448]	; (8002010 <HAL_RCC_ClockConfig+0x1ec>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b6e      	ldr	r3, [pc, #440]	; (8002010 <HAL_RCC_ClockConfig+0x1ec>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0cf      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4b66      	ldr	r3, [pc, #408]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d908      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b63      	ldr	r3, [pc, #396]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4960      	ldr	r1, [pc, #384]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d04c      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d121      	bne.n	8001efa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0a6      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d115      	bne.n	8001efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e09a      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eda:	4b4e      	ldr	r3, [pc, #312]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e08e      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eea:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e086      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4943      	ldr	r1, [pc, #268]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fdc2 	bl	8000a94 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7fe fdbe 	bl	8000a94 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e06e      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 020c 	and.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1eb      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d010      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d208      	bcs.n	8001f6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	492b      	ldr	r1, [pc, #172]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d210      	bcs.n	8001f9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 0207 	bic.w	r2, r3, #7
 8001f80:	4923      	ldr	r1, [pc, #140]	; (8002010 <HAL_RCC_ClockConfig+0x1ec>)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_RCC_ClockConfig+0x1ec>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e036      	b.n	8002008 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d008      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4918      	ldr	r1, [pc, #96]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4910      	ldr	r1, [pc, #64]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd8:	f000 f824 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	490b      	ldr	r1, [pc, #44]	; (8002018 <HAL_RCC_ClockConfig+0x1f4>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001ff6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1fc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fcf9 	bl	80009f4 <HAL_InitTick>
 8002002:	4603      	mov	r3, r0
 8002004:	72fb      	strb	r3, [r7, #11]

  return status;
 8002006:	7afb      	ldrb	r3, [r7, #11]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40022000 	.word	0x40022000
 8002014:	40021000 	.word	0x40021000
 8002018:	08002f84 	.word	0x08002f84
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002032:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d121      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d11e      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002064:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e005      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002080:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002088:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10d      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b04      	cmp	r3, #4
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_GetSysClockFreq+0x110>)
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	e004      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCC_GetSysClockFreq+0x114>)
 80020aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d134      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0xa6>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d003      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
 80020c8:	e005      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCC_GetSysClockFreq+0x110>)
 80020cc:	617b      	str	r3, [r7, #20]
      break;
 80020ce:	e005      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_GetSysClockFreq+0x114>)
 80020d2:	617b      	str	r3, [r7, #20]
      break;
 80020d4:	e002      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	617b      	str	r3, [r7, #20]
      break;
 80020da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	3301      	adds	r3, #1
 80020e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	fb03 f202 	mul.w	r2, r3, r2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0e5b      	lsrs	r3, r3, #25
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	3301      	adds	r3, #1
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800211c:	69bb      	ldr	r3, [r7, #24]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	08002f9c 	.word	0x08002f9c
 8002134:	00f42400 	.word	0x00f42400
 8002138:	007a1200 	.word	0x007a1200

0800213c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_RCC_GetHCLKFreq+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002158:	f7ff fff0 	bl	800213c <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <HAL_RCC_GetPCLK1Freq+0x28>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08002f94 	.word	0x08002f94

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002184:	f7ff ffda 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0adb      	lsrs	r3, r3, #11
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4904      	ldr	r1, [pc, #16]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08002f94 	.word	0x08002f94

080021ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff f968 	bl	8001498 <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
 80021ca:	e014      	b.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a24      	ldr	r2, [pc, #144]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff f958 	bl	8001498 <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d10b      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d919      	bls.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2ba0      	cmp	r3, #160	; 0xa0
 8002208:	d902      	bls.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220a:	2302      	movs	r3, #2
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e013      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002210:	2301      	movs	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e010      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d902      	bls.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800221c:	2303      	movs	r3, #3
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e00a      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d102      	bne.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002228:	2302      	movs	r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e004      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b70      	cmp	r3, #112	; 0x70
 8002232:	d101      	bne.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 0207 	bic.w	r2, r3, #7
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40022000 	.word	0x40022000

0800226c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002274:	2300      	movs	r3, #0
 8002276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002278:	2300      	movs	r3, #0
 800227a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 809e 	beq.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800228e:	4b46      	ldr	r3, [pc, #280]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
 80022b0:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c0:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a39      	ldr	r2, [pc, #228]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022cc:	f7fe fbe2 	bl	8000a94 <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022d2:	e009      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe fbde 	bl	8000a94 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d902      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	74fb      	strb	r3, [r7, #19]
        break;
 80022e6:	e005      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ef      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d15a      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002304:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01e      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	429a      	cmp	r2, r3
 8002314:	d019      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002320:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002342:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d016      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fb9e 	bl	8000a94 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235a:	e00b      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe fb9a 	bl	8000a94 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d902      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	74fb      	strb	r3, [r7, #19]
            break;
 8002372:	e006      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ec      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10b      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4904      	ldr	r1, [pc, #16]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800239e:	e009      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
 80023a4:	e006      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b4:	7c7b      	ldrb	r3, [r7, #17]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b6e      	ldr	r3, [pc, #440]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	4a6d      	ldr	r2, [pc, #436]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d2:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	f023 0203 	bic.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4964      	ldr	r1, [pc, #400]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f4:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 020c 	bic.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	495c      	ldr	r1, [pc, #368]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002416:	4b57      	ldr	r3, [pc, #348]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4953      	ldr	r1, [pc, #332]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002438:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	494b      	ldr	r1, [pc, #300]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4942      	ldr	r1, [pc, #264]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	493a      	ldr	r1, [pc, #232]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	4931      	ldr	r1, [pc, #196]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	4929      	ldr	r1, [pc, #164]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	4920      	ldr	r1, [pc, #128]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d015      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	4918      	ldr	r1, [pc, #96]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002522:	d105      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800252a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800252e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d015      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	490a      	ldr	r1, [pc, #40]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800255a:	d105      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002566:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002568:	7cbb      	ldrb	r3, [r7, #18]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e040      	b.n	800262c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe f96e 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	; 0x24
 80025c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fa82 	bl	8002ae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f825 	bl	8002634 <UART_SetConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e01b      	b.n	800262c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fb01 	bl	8002c2c <UART_CheckIdleState>
 800262a:	4603      	mov	r3, r0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002638:	b08a      	sub	sp, #40	; 0x28
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	431a      	orrs	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	431a      	orrs	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	4313      	orrs	r3, r2
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b9e      	ldr	r3, [pc, #632]	; (80028dc <UART_SetConfig+0x2a8>)
 8002664:	4013      	ands	r3, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266c:	430b      	orrs	r3, r1
 800266e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a93      	ldr	r2, [pc, #588]	; (80028e0 <UART_SetConfig+0x2ac>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	4313      	orrs	r3, r2
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a8a      	ldr	r2, [pc, #552]	; (80028e4 <UART_SetConfig+0x2b0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d126      	bne.n	800270c <UART_SetConfig+0xd8>
 80026be:	4b8a      	ldr	r3, [pc, #552]	; (80028e8 <UART_SetConfig+0x2b4>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d81b      	bhi.n	8002704 <UART_SetConfig+0xd0>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <UART_SetConfig+0xa0>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	080026f5 	.word	0x080026f5
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	080026fd 	.word	0x080026fd
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ea:	e0ab      	b.n	8002844 <UART_SetConfig+0x210>
 80026ec:	2302      	movs	r3, #2
 80026ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026f2:	e0a7      	b.n	8002844 <UART_SetConfig+0x210>
 80026f4:	2304      	movs	r3, #4
 80026f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026fa:	e0a3      	b.n	8002844 <UART_SetConfig+0x210>
 80026fc:	2308      	movs	r3, #8
 80026fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002702:	e09f      	b.n	8002844 <UART_SetConfig+0x210>
 8002704:	2310      	movs	r3, #16
 8002706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800270a:	e09b      	b.n	8002844 <UART_SetConfig+0x210>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a76      	ldr	r2, [pc, #472]	; (80028ec <UART_SetConfig+0x2b8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d138      	bne.n	8002788 <UART_SetConfig+0x154>
 8002716:	4b74      	ldr	r3, [pc, #464]	; (80028e8 <UART_SetConfig+0x2b4>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d82d      	bhi.n	8002780 <UART_SetConfig+0x14c>
 8002724:	a201      	add	r2, pc, #4	; (adr r2, 800272c <UART_SetConfig+0xf8>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	08002761 	.word	0x08002761
 8002730:	08002781 	.word	0x08002781
 8002734:	08002781 	.word	0x08002781
 8002738:	08002781 	.word	0x08002781
 800273c:	08002771 	.word	0x08002771
 8002740:	08002781 	.word	0x08002781
 8002744:	08002781 	.word	0x08002781
 8002748:	08002781 	.word	0x08002781
 800274c:	08002769 	.word	0x08002769
 8002750:	08002781 	.word	0x08002781
 8002754:	08002781 	.word	0x08002781
 8002758:	08002781 	.word	0x08002781
 800275c:	08002779 	.word	0x08002779
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002766:	e06d      	b.n	8002844 <UART_SetConfig+0x210>
 8002768:	2302      	movs	r3, #2
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800276e:	e069      	b.n	8002844 <UART_SetConfig+0x210>
 8002770:	2304      	movs	r3, #4
 8002772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002776:	e065      	b.n	8002844 <UART_SetConfig+0x210>
 8002778:	2308      	movs	r3, #8
 800277a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800277e:	e061      	b.n	8002844 <UART_SetConfig+0x210>
 8002780:	2310      	movs	r3, #16
 8002782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002786:	e05d      	b.n	8002844 <UART_SetConfig+0x210>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <UART_SetConfig+0x2bc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d125      	bne.n	80027de <UART_SetConfig+0x1aa>
 8002792:	4b55      	ldr	r3, [pc, #340]	; (80028e8 <UART_SetConfig+0x2b4>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800279c:	2b30      	cmp	r3, #48	; 0x30
 800279e:	d016      	beq.n	80027ce <UART_SetConfig+0x19a>
 80027a0:	2b30      	cmp	r3, #48	; 0x30
 80027a2:	d818      	bhi.n	80027d6 <UART_SetConfig+0x1a2>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d00a      	beq.n	80027be <UART_SetConfig+0x18a>
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d814      	bhi.n	80027d6 <UART_SetConfig+0x1a2>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <UART_SetConfig+0x182>
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d008      	beq.n	80027c6 <UART_SetConfig+0x192>
 80027b4:	e00f      	b.n	80027d6 <UART_SetConfig+0x1a2>
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027bc:	e042      	b.n	8002844 <UART_SetConfig+0x210>
 80027be:	2302      	movs	r3, #2
 80027c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c4:	e03e      	b.n	8002844 <UART_SetConfig+0x210>
 80027c6:	2304      	movs	r3, #4
 80027c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027cc:	e03a      	b.n	8002844 <UART_SetConfig+0x210>
 80027ce:	2308      	movs	r3, #8
 80027d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027d4:	e036      	b.n	8002844 <UART_SetConfig+0x210>
 80027d6:	2310      	movs	r3, #16
 80027d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027dc:	e032      	b.n	8002844 <UART_SetConfig+0x210>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a3f      	ldr	r2, [pc, #252]	; (80028e0 <UART_SetConfig+0x2ac>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d12a      	bne.n	800283e <UART_SetConfig+0x20a>
 80027e8:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <UART_SetConfig+0x2b4>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027f6:	d01a      	beq.n	800282e <UART_SetConfig+0x1fa>
 80027f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027fc:	d81b      	bhi.n	8002836 <UART_SetConfig+0x202>
 80027fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002802:	d00c      	beq.n	800281e <UART_SetConfig+0x1ea>
 8002804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002808:	d815      	bhi.n	8002836 <UART_SetConfig+0x202>
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <UART_SetConfig+0x1e2>
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002812:	d008      	beq.n	8002826 <UART_SetConfig+0x1f2>
 8002814:	e00f      	b.n	8002836 <UART_SetConfig+0x202>
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800281c:	e012      	b.n	8002844 <UART_SetConfig+0x210>
 800281e:	2302      	movs	r3, #2
 8002820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002824:	e00e      	b.n	8002844 <UART_SetConfig+0x210>
 8002826:	2304      	movs	r3, #4
 8002828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800282c:	e00a      	b.n	8002844 <UART_SetConfig+0x210>
 800282e:	2308      	movs	r3, #8
 8002830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002834:	e006      	b.n	8002844 <UART_SetConfig+0x210>
 8002836:	2310      	movs	r3, #16
 8002838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800283c:	e002      	b.n	8002844 <UART_SetConfig+0x210>
 800283e:	2310      	movs	r3, #16
 8002840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <UART_SetConfig+0x2ac>)
 800284a:	4293      	cmp	r3, r2
 800284c:	f040 808a 	bne.w	8002964 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002854:	2b08      	cmp	r3, #8
 8002856:	d824      	bhi.n	80028a2 <UART_SetConfig+0x26e>
 8002858:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <UART_SetConfig+0x22c>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002885 	.word	0x08002885
 8002864:	080028a3 	.word	0x080028a3
 8002868:	0800288d 	.word	0x0800288d
 800286c:	080028a3 	.word	0x080028a3
 8002870:	08002893 	.word	0x08002893
 8002874:	080028a3 	.word	0x080028a3
 8002878:	080028a3 	.word	0x080028a3
 800287c:	080028a3 	.word	0x080028a3
 8002880:	0800289b 	.word	0x0800289b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002884:	f7ff fc66 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8002888:	61f8      	str	r0, [r7, #28]
        break;
 800288a:	e010      	b.n	80028ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <UART_SetConfig+0x2c0>)
 800288e:	61fb      	str	r3, [r7, #28]
        break;
 8002890:	e00d      	b.n	80028ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002892:	f7ff fbc7 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002896:	61f8      	str	r0, [r7, #28]
        break;
 8002898:	e009      	b.n	80028ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800289a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289e:	61fb      	str	r3, [r7, #28]
        break;
 80028a0:	e005      	b.n	80028ae <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80028ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8109 	beq.w	8002ac8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d305      	bcc.n	80028d2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d912      	bls.n	80028f8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80028d8:	e0f6      	b.n	8002ac8 <UART_SetConfig+0x494>
 80028da:	bf00      	nop
 80028dc:	efff69f3 	.word	0xefff69f3
 80028e0:	40008000 	.word	0x40008000
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40004400 	.word	0x40004400
 80028f0:	40004800 	.word	0x40004800
 80028f4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2200      	movs	r2, #0
 80028fc:	461c      	mov	r4, r3
 80028fe:	4615      	mov	r5, r2
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	022b      	lsls	r3, r5, #8
 800290a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800290e:	0222      	lsls	r2, r4, #8
 8002910:	68f9      	ldr	r1, [r7, #12]
 8002912:	6849      	ldr	r1, [r1, #4]
 8002914:	0849      	lsrs	r1, r1, #1
 8002916:	2000      	movs	r0, #0
 8002918:	4688      	mov	r8, r1
 800291a:	4681      	mov	r9, r0
 800291c:	eb12 0a08 	adds.w	sl, r2, r8
 8002920:	eb43 0b09 	adc.w	fp, r3, r9
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002932:	4650      	mov	r0, sl
 8002934:	4659      	mov	r1, fp
 8002936:	f7fd fc4b 	bl	80001d0 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4613      	mov	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002948:	d308      	bcc.n	800295c <UART_SetConfig+0x328>
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002950:	d204      	bcs.n	800295c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e0b5      	b.n	8002ac8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002962:	e0b1      	b.n	8002ac8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800296c:	d15d      	bne.n	8002a2a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800296e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002972:	2b08      	cmp	r3, #8
 8002974:	d827      	bhi.n	80029c6 <UART_SetConfig+0x392>
 8002976:	a201      	add	r2, pc, #4	; (adr r2, 800297c <UART_SetConfig+0x348>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	080029a1 	.word	0x080029a1
 8002980:	080029a9 	.word	0x080029a9
 8002984:	080029b1 	.word	0x080029b1
 8002988:	080029c7 	.word	0x080029c7
 800298c:	080029b7 	.word	0x080029b7
 8002990:	080029c7 	.word	0x080029c7
 8002994:	080029c7 	.word	0x080029c7
 8002998:	080029c7 	.word	0x080029c7
 800299c:	080029bf 	.word	0x080029bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029a0:	f7ff fbd8 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 80029a4:	61f8      	str	r0, [r7, #28]
        break;
 80029a6:	e014      	b.n	80029d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029a8:	f7ff fbea 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 80029ac:	61f8      	str	r0, [r7, #28]
        break;
 80029ae:	e010      	b.n	80029d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b0:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <UART_SetConfig+0x4b0>)
 80029b2:	61fb      	str	r3, [r7, #28]
        break;
 80029b4:	e00d      	b.n	80029d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029b6:	f7ff fb35 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 80029ba:	61f8      	str	r0, [r7, #28]
        break;
 80029bc:	e009      	b.n	80029d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c2:	61fb      	str	r3, [r7, #28]
        break;
 80029c4:	e005      	b.n	80029d2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80029d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d077      	beq.n	8002ac8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005a      	lsls	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	441a      	add	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b0f      	cmp	r3, #15
 80029f2:	d916      	bls.n	8002a22 <UART_SetConfig+0x3ee>
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fa:	d212      	bcs.n	8002a22 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f023 030f 	bic.w	r3, r3, #15
 8002a04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	8afb      	ldrh	r3, [r7, #22]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	8afa      	ldrh	r2, [r7, #22]
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	e052      	b.n	8002ac8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a28:	e04e      	b.n	8002ac8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d827      	bhi.n	8002a82 <UART_SetConfig+0x44e>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <UART_SetConfig+0x404>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a5d 	.word	0x08002a5d
 8002a3c:	08002a65 	.word	0x08002a65
 8002a40:	08002a6d 	.word	0x08002a6d
 8002a44:	08002a83 	.word	0x08002a83
 8002a48:	08002a73 	.word	0x08002a73
 8002a4c:	08002a83 	.word	0x08002a83
 8002a50:	08002a83 	.word	0x08002a83
 8002a54:	08002a83 	.word	0x08002a83
 8002a58:	08002a7b 	.word	0x08002a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a5c:	f7ff fb7a 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8002a60:	61f8      	str	r0, [r7, #28]
        break;
 8002a62:	e014      	b.n	8002a8e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a64:	f7ff fb8c 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 8002a68:	61f8      	str	r0, [r7, #28]
        break;
 8002a6a:	e010      	b.n	8002a8e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <UART_SetConfig+0x4b0>)
 8002a6e:	61fb      	str	r3, [r7, #28]
        break;
 8002a70:	e00d      	b.n	8002a8e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a72:	f7ff fad7 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002a76:	61f8      	str	r0, [r7, #28]
        break;
 8002a78:	e009      	b.n	8002a8e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a7e:	61fb      	str	r3, [r7, #28]
        break;
 8002a80:	e005      	b.n	8002a8e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a8c:	bf00      	nop
    }

    if (pclk != 0U)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d019      	beq.n	8002ac8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	085a      	lsrs	r2, r3, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	441a      	add	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	d909      	bls.n	8002ac2 <UART_SetConfig+0x48e>
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d205      	bcs.n	8002ac2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	e002      	b.n	8002ac8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae2:	bf00      	nop
 8002ae4:	00f42400 	.word	0x00f42400

08002ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01a      	beq.n	8002bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be6:	d10a      	bne.n	8002bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b098      	sub	sp, #96	; 0x60
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c3c:	f7fd ff2a 	bl	8000a94 <HAL_GetTick>
 8002c40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d12e      	bne.n	8002cae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f88c 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d021      	beq.n	8002cae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c72:	e853 3f00 	ldrex	r3, [r3]
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c88:	647b      	str	r3, [r7, #68]	; 0x44
 8002c8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e6      	bne.n	8002c6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e062      	b.n	8002d74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d149      	bne.n	8002d50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f856 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03c      	beq.n	8002d50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	623b      	str	r3, [r7, #32]
   return(result);
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e6      	bne.n	8002cd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3308      	adds	r3, #8
 8002d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d28:	61fa      	str	r2, [r7, #28]
 8002d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	69b9      	ldr	r1, [r7, #24]
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	617b      	str	r3, [r7, #20]
   return(result);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e5      	bne.n	8002d08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e011      	b.n	8002d74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3758      	adds	r7, #88	; 0x58
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8c:	e049      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d045      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d96:	f7fd fe7d 	bl	8000a94 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d302      	bcc.n	8002dac <UART_WaitOnFlagUntilTimeout+0x30>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e048      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d031      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d110      	bne.n	8002dee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f838 	bl	8002e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e029      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfc:	d111      	bne.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f81e 	bl	8002e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e00f      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d0a6      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b095      	sub	sp, #84	; 0x54
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e70:	643b      	str	r3, [r7, #64]	; 0x40
 8002e72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e6      	bne.n	8002e52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3308      	adds	r3, #8
 8002e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d118      	bne.n	8002ef2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f023 0310 	bic.w	r3, r3, #16
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	613b      	str	r3, [r7, #16]
   return(result);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e6      	bne.n	8002ec0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f06:	bf00      	nop
 8002f08:	3754      	adds	r7, #84	; 0x54
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <memset>:
 8002f12:	4402      	add	r2, r0
 8002f14:	4603      	mov	r3, r0
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d100      	bne.n	8002f1c <memset+0xa>
 8002f1a:	4770      	bx	lr
 8002f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f20:	e7f9      	b.n	8002f16 <memset+0x4>
	...

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	4d0d      	ldr	r5, [pc, #52]	; (8002f5c <__libc_init_array+0x38>)
 8002f28:	4c0d      	ldr	r4, [pc, #52]	; (8002f60 <__libc_init_array+0x3c>)
 8002f2a:	1b64      	subs	r4, r4, r5
 8002f2c:	10a4      	asrs	r4, r4, #2
 8002f2e:	2600      	movs	r6, #0
 8002f30:	42a6      	cmp	r6, r4
 8002f32:	d109      	bne.n	8002f48 <__libc_init_array+0x24>
 8002f34:	4d0b      	ldr	r5, [pc, #44]	; (8002f64 <__libc_init_array+0x40>)
 8002f36:	4c0c      	ldr	r4, [pc, #48]	; (8002f68 <__libc_init_array+0x44>)
 8002f38:	f000 f818 	bl	8002f6c <_init>
 8002f3c:	1b64      	subs	r4, r4, r5
 8002f3e:	10a4      	asrs	r4, r4, #2
 8002f40:	2600      	movs	r6, #0
 8002f42:	42a6      	cmp	r6, r4
 8002f44:	d105      	bne.n	8002f52 <__libc_init_array+0x2e>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4c:	4798      	blx	r3
 8002f4e:	3601      	adds	r6, #1
 8002f50:	e7ee      	b.n	8002f30 <__libc_init_array+0xc>
 8002f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f56:	4798      	blx	r3
 8002f58:	3601      	adds	r6, #1
 8002f5a:	e7f2      	b.n	8002f42 <__libc_init_array+0x1e>
 8002f5c:	08002fd4 	.word	0x08002fd4
 8002f60:	08002fd4 	.word	0x08002fd4
 8002f64:	08002fd4 	.word	0x08002fd4
 8002f68:	08002fd8 	.word	0x08002fd8

08002f6c <_init>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr

08002f78 <_fini>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr
